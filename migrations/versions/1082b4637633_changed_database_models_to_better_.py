"""Changed database models to better correspond to viewser-schema

Revision ID: 1082b4637633
Revises: c74c8402e700
Create Date: 2021-06-02 15:19:20.998775

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1082b4637633'
down_revision = 'c74c8402e700'
branch_labels = None
depends_on = None


def upgrade():
    op.execute("""
        ALTER TYPE remotebases RENAME TO remotenamespaces; 
    """)

    op.rename_table("op","operation")
    with op.batch_alter_table("operation") as batch_op:
        batch_op.alter_column(
                "base_path",
                new_column_name = "namespace",
                type_ = postgresql.ENUM("trf","base", name = "remotenamespaces"))
        batch_op.alter_column("path", new_column_name = "name")
        batch_op.alter_column("args", new_column_name = "arguments")
        batch_op.alter_column("op_id", new_column_name = "operation_id")
        batch_op.alter_column("next_op_id", new_column_name = "next_operation_id")

    """
    Autogen: 
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('operation',
    sa.Column('operation_id', sa.Integer(), nullable=False),
    sa.Column('next_operation_id', sa.Integer(), nullable=True),
    sa.Column('queryset_name', sa.String(), nullable=True),
    sa.Column('namespace', sa.Enum('trf', 'base', name='remotenamespaces'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('arguments', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['next_operation_id'], ['operation.operation_id'], ),
    sa.ForeignKeyConstraint(['queryset_name'], ['queryset.name'], ),
    sa.PrimaryKeyConstraint('operation_id')
    )
    op.drop_table('op')
    # ### end Alembic commands ###
    """

def downgrade():
    op.execute("""
        ALTER TYPE remotenamespaces RENAME TO remotebases; 
    """)

    op.rename_table("operation","op")
    with op.batch_alter_table("op") as batch_op:
        batch_op.alter_column(
                "namespace",
                new_column_name = "base_path",
                type_ = postgresql.ENUM("trf","base", name = "remotebases"))
        batch_op.alter_column("name", new_column_name = "path")
        batch_op.alter_column("arguments", new_column_name = "args")
        batch_op.alter_column("operation_id", new_column_name = "op_id")
        batch_op.alter_column("next_operation_id", new_column_name = "next_op_id")

    """
    Autogen:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('op',
    sa.Column('base_path', postgresql.ENUM('trf', 'base', name='remotebases'), autoincrement=False, nullable=False),
    sa.Column('path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('args', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('queryset_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('op_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('next_op_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['next_op_id'], ['op.op_id'], name='op_next_op_id_fkey'),
    sa.ForeignKeyConstraint(['queryset_name'], ['queryset.name'], name='op_queryset_name_fkey'),
    sa.PrimaryKeyConstraint('op_id', name='op_pkey')
    )
    op.drop_table('operation')
    # ### end Alembic commands ###
    """
